import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;

class Room {
    private int roomNumber;
    private String category;
    private boolean isAvailable;
    private double price;
    private String state;

    public Room(int roomNumber, String category, double price, String state) {
        this.roomNumber = roomNumber;
        this.category = category;
        this.isAvailable = true;
        this.price = price;
        this.state = state;
    }

    public int getRoomNumber() {
        return roomNumber;
    }

    public String getCategory() {
        return category;
    }

    public boolean isAvailable() {
        return isAvailable;
    }

    public double getPrice() {
        return price;
    }

    public String getState() {
        return state;
    }

    public void bookRoom() {
        isAvailable = false;
    }

    public void vacateRoom() {
        isAvailable = true;
    }

    @Override
    public String toString() {
        return "Room Number: " + roomNumber + ", Category: " + category + ", Price: $" + price + ", State: " + state + ", Available: " + isAvailable;
    }
}

class Booking {
    private Room room;
    private String customerName;
    private double payment;
    private String bookingDate;
    private String bookingMonth;

    public Booking(Room room, String customerName, double payment, String bookingDate, String bookingMonth) {
        this.room = room;
        this.customerName = customerName;
        this.payment = payment;
        this.bookingDate = bookingDate;
        this.bookingMonth = bookingMonth;
    }

    public Room getRoom() {
        return room;
    }

    public String getCustomerName() {
        return customerName;
    }

    public double getPayment() {
        return payment;
    }

    public String getBookingDate() {
        return bookingDate;
    }

    public String getBookingMonth() {
        return bookingMonth;
    }

    @Override
    public String toString() {
        return "Booking [Room: " + room.getRoomNumber() + ", Customer: " + customerName + ", Payment: $" + payment + ", Date: " + bookingDate + ", Month: " + bookingMonth + "]";
    }
}

public class HotelReservationSystem {
    private static List<Room> rooms = new ArrayList<>();
    private static List<Booking> bookings = new ArrayList<>();
    private static Scanner scanner = new Scanner(System.in);
    private static String selectedState = null;

    private static String[] states = {
        "Andhra Pradesh", "Arunachal Pradesh", "Assam", "Bihar", "Chhattisgarh",
        "Goa", "Gujarat", "Haryana", "Himachal Pradesh", "Jharkhand", "Karnataka",
        "Kerala", "Madhya Pradesh", "Maharashtra", "Manipur", "Meghalaya", "Mizoram",
        "Nagaland", "Odisha", "Punjab", "Rajasthan", "Sikkim", "Tamil Nadu",
        "Telangana", "Tripura", "Uttar Pradesh", "Uttarakhand", "West Bengal"
    };

    public static void main(String[] args) {
        initializeRooms();

        boolean exit = false;
        while (!exit) {
            System.out.println("\nHotel Reservation System");
            System.out.println("1. Search for available rooms");
            System.out.println("2. Make a reservation");
            System.out.println("3. View booking details");
            System.out.println("4. Exit");
            System.out.print("Enter your choice: ");
            int choice = scanner.nextInt();
            scanner.nextLine(); 

            switch (choice) {
                case 1:
                    searchAvailableRooms();
                    break;
                case 2:
                    makeReservation();
                    break;
                case 3:
                    viewBookingDetails();
                    break;
                case 4:
                    exit = true;
                    System.out.println("Thank you for using the Hotel Reservation System.");
                    break;
                default:
                    System.out.println("Invalid choice. Please try again.");
            }
        }
    }

    private static void initializeRooms() {
        int roomNumber = 100;
        for (String state : states) {
            rooms.add(new Room(roomNumber++, "Single", 100.0, state));
            rooms.add(new Room(roomNumber++, "Double", 150.0, state));
            rooms.add(new Room(roomNumber++, "Suite", 200.0, state));
        }
    }

    private static void searchAvailableRooms() {
        displayStates();
        System.out.print("Select state number to search rooms: ");
        int stateChoice = scanner.nextInt();
        scanner.nextLine(); 

        if (stateChoice < 1 || stateChoice > states.length) {
            System.out.println("Invalid state selection. Please try again.");
            return;
        }

        selectedState = states[stateChoice - 1];
        System.out.println("Available Rooms in " + selectedState + ":");
        boolean found = false;
        for (Room room : rooms) {
            if (room.isAvailable() && room.getState().equalsIgnoreCase(selectedState)) {
                System.out.println("Room Number: " + room.getRoomNumber() + ", Category: " + room.getCategory() + ", Price: $" + room.getPrice());
                found = true;
            }
        }
        if (!found) {
            System.out.println("No available rooms found in " + selectedState);
        }
    }

    private static void displayStates() {
        System.out.println("Available States:");
        for (int i = 0; i < states.length; i++) {
            System.out.println((i + 1) + ". " + states[i]);
        }
    }

    private static void makeReservation() {
        if (selectedState == null) {
            System.out.println("Please search for available rooms first.");
            return;
        }

        List<Room> availableRooms = new ArrayList<>();
        System.out.println("Available Rooms in " + selectedState + ":");
        for (Room room : rooms) {
            if (room.isAvailable() && room.getState().equalsIgnoreCase(selectedState)) {
                availableRooms.add(room);
                System.out.println("Room Number: " + room.getRoomNumber() + ", Category: " + room.getCategory() + ", Price: $" + room.getPrice());
            }
        }

        if (availableRooms.isEmpty()) {
            System.out.println("No available rooms found in " + selectedState);
            return;
        }

        System.out.print("Enter room number to book: ");
        int roomNumber = scanner.nextInt();
        scanner.nextLine(); // consume newline

        Room roomToBook = null;
        for (Room room : availableRooms) {
            if (room.getRoomNumber() == roomNumber) {
                roomToBook = room;
                break;
            }
        }

        if (roomToBook == null) {
            System.out.println("Room not available or invalid room number.");
            return;
        }

        System.out.print("Enter customer name: ");
        String customerName = scanner.nextLine();
        System.out.print("Enter booking date (e.g., 25): ");
        String bookingDate = scanner.nextLine();
        System.out.print("Enter booking month (e.g., May): ");
        String bookingMonth = scanner.nextLine();
        System.out.print("Enter payment amount: $");
        double payment = scanner.nextDouble();
        scanner.nextLine(); 

        if (payment < roomToBook.getPrice()) {
            System.out.println("Insufficient payment. Booking failed.");
            return;
        }

        roomToBook.bookRoom();
        Booking booking = new Booking(roomToBook, customerName, payment, bookingDate, bookingMonth);
        bookings.add(booking);

        System.out.println("Reservation successful!");
        System.out.println(booking);
    }

    private static void viewBookingDetails() {
        System.out.print("Enter room number to view booking: ");
        int roomNumber = scanner.nextInt();
        scanner.nextLine(); 

        for (Booking booking : bookings) {
            if (booking.getRoom().getRoomNumber() == roomNumber) {
                System.out.println(booking);
                return;
            }
        }

        System.out.println("No booking found for room number" + roomNumber);
    }
}
